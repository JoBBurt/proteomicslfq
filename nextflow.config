/*
 * -------------------------------------------------
 *  nf-core/proteomicslfq Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 */

// Global default params, used in configs
params {

  // Workflow flags
  spectra = "data/*.mzML"
  database = "data/*.fasta"
  expdesign = "data/*.tsv"

  // Tools flags
  posterior_probabilities = "percolator"
  transfer_ids = false
  targeted_only = false
  mass_recalibration = true
  add_decoys = false
  search_engine = "comet"
  protein_inference = "aggregation"
  allowed_missed_cleavages = 1
  psm_level_fdr_cutoff = 0.05
  protein_level_fdr_cutoff = 0.05

  // shared search engine parameters
  enzyme = 'Trypsin'
  precursor_mass_tolerance = 5
  precursor_error_units = "ppm"
  fixed_mods = 'Carbamidomethyl (C)'
  variable_mods = 'Oxidation (M)'

  // Percolator flags
  train_FDR = 0.05
  test_FDR = 0.05
  FDR_level = 'peptide-level-fdrs'
  klammer = false
  description_correct_features = 0

  // MSGF+ flags
  isotope_error_range = "0,1"
  fragment_method = "from_spectrum"
  instrument = "high_res"
  protocol = "automatic" 
  tryptic = "non"
  min_precursor_charge = 2
  max_precursor_charge = 3
  min_peptide_length = 6 
  max_peptide_length = 40
  matches_per_spec = 1
  max_mods = 2

  // Comet flags
  // TODO


  outdir = './results'

  // Boilerplate options
  name = false
  email = false
  plaintext_email = false
  monochrome_logs = false
  help = false
  igenomes_base = "./iGenomes"
  tracedir = "${params.outdir}/pipeline_info"
  clusterOptions = false
  awsqueue = false
  awsregion = 'eu-west-1'
  igenomesIgnore = false
  custom_config_version = 'master'
  custom_config_base = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
  hostnames = false
  config_profile_description = false
  config_profile_contact = false
  config_profile_url = false

}

// Container slug. Stable releases should specify release tag!
// Developmental code should specify :dev
process.container = 'openms/executables'

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load nf-core custom profiles from different Institutions
try {
  includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
  System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}

profiles {
  awsbatch { includeConfig 'conf/awsbatch.config' }
  conda { process.conda = "$baseDir/environment.yml" }
  debug { process.beforeScript = 'echo $HOSTNAME' }
  docker { docker.enabled = true }
  singularity { singularity.enabled = true }
  test { includeConfig 'conf/test.config' }
}

// Load igenomes.config if required
if(!params.igenomesIgnore){
  includeConfig 'conf/igenomes.config'
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file = "${params.tracedir}/execution_timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/execution_report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/execution_trace.txt"
}
dag {
  enabled = true
  file = "${params.tracedir}/pipeline_dag.svg"
}

manifest {
  name = 'nf-core/proteomicslfq'
  author = 'The Heumos Brothers - Simon and Lukas'
  homePage = 'https://github.com/nf-core/proteomicslfq'
  description = 'Proteomics label-free quantification (LFQ) analysis pipeline using OpenMS and MSstats, with feature quantification, feature summarization, quality control and group-based statistical analysis.'
  mainScript = 'main.nf'
  nextflowVersion = '>=0.32.0'
  version = '1.0dev'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
