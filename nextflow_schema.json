{
    "$schema": "https://json-schema.org/draft-07/schema",
    "$id": "https://raw.githubusercontent.com/nf-core/proteomicslfq/master/nextflow_schema.json",
    "title": "nf-core/proteomicslfq pipeline parameters",
    "description": "Proteomics label-free quantification (LFQ) analysis pipeline using OpenMS and MSstats, with feature quantification, feature summarization, quality control and group-based statistical analysis.",
    "type": "object",
    "properties": {
        "Input/output options": {
            "type": "object",
            "properties": {
                "outdir": {
                    "type": "string",
                    "description": "The output directory where the results will be saved.",
                    "default": "./results",
                    "fa_icon": "fas fa-folder-open",
                    "help_text": ""
                },
                "email": {
                    "type": "string",
                    "description": "Email address for completion summary.",
                    "fa_icon": "fas fa-envelope",
                    "help_text": "An email address to send a summary email to when the pipeline is completed.",
                    "pattern": "^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$"
                }
            },
            "fa_icon": "fas fa-terminal",
            "description": "Define where the pipeline should find input data and save output data."
        },
        "Generic options": {
            "type": "object",
            "properties": {
                "help": {
                    "type": "boolean",
                    "description": "Display help text.",
                    "hidden": true,
                    "fa_icon": "fas fa-question-circle",
                    "default": false
                },
                "name": {
                    "type": "string",
                    "description": "Workflow name.",
                    "fa_icon": "fas fa-fingerprint",
                    "hidden": true,
                    "help_text": "A custom name for the pipeline run. Unlike the core nextflow `-name` option with one hyphen this parameter can be reused multiple times, for example if using `-resume`. Passed through to steps such as MultiQC and used for things like report filenames and titles."
                },
                "email_on_fail": {
                    "type": "string",
                    "description": "Email address for completion summary, only when pipeline fails.",
                    "fa_icon": "fas fa-exclamation-triangle",
                    "pattern": "^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$",
                    "hidden": true,
                    "help_text": "An email address to send a summary email to when the pipeline is completed - ONLY sent if the pipeline does not exit successfully."
                },
                "plaintext_email": {
                    "type": "boolean",
                    "description": "Send plain-text email instead of HTML.",
                    "fa_icon": "fas fa-remove-format",
                    "hidden": true,
                    "default": false,
                    "help_text": ""
                },
                "monochrome_logs": {
                    "type": "boolean",
                    "description": "Do not use coloured log outputs.",
                    "fa_icon": "fas fa-palette",
                    "hidden": true,
                    "default": false,
                    "help_text": ""
                },
                "tracedir": {
                    "type": "string",
                    "description": "Directory to keep pipeline Nextflow logs and reports.",
                    "default": "${params.outdir}/pipeline_info",
                    "fa_icon": "fas fa-cogs",
                    "hidden": true,
                    "help_text": ""
                }
            },
            "fa_icon": "fas fa-file-import",
            "description": "Less common options for the pipeline, typically set in a config file.",
            "help_text": "These options are common to all nf-core pipelines and allow you to customise some of the core preferences for how the pipeline runs.\n\nTypically these options would be set in a Nextflow config file loaded for all pipeline runs, such as `~/.nextflow/config`."
        },
        "Max job request options": {
            "type": "object",
            "properties": {
                "max_cpus": {
                    "type": "integer",
                    "description": "Maximum number of CPUs that can be requested  for any single job.",
                    "default": 16,
                    "fa_icon": "fas fa-microchip",
                    "hidden": true,
                    "help_text": "Use to set an upper-limit for the CPU requirement for each process. Should be an integer e.g. `--max_cpus 1`"
                },
                "max_memory": {
                    "type": "string",
                    "description": "Maximum amount of memory that can be requested for any single job.",
                    "default": "128.GB",
                    "fa_icon": "fas fa-memory",
                    "hidden": true,
                    "help_text": "Use to set an upper-limit for the memory requirement for each process. Should be a string in the format integer-unit e.g. `--max_memory '8.GB'`"
                },
                "max_time": {
                    "type": "string",
                    "description": "Maximum amount of time that can be requested for any single job.",
                    "default": "240.h",
                    "fa_icon": "far fa-clock",
                    "hidden": true,
                    "help_text": "Use to set an upper-limit for the time requirement for each process. Should be a string in the format integer-unit e.g. `--max_time '2.h'`"
                }
            },
            "fa_icon": "fab fa-acquisitions-incorporated",
            "description": "Set the top limit for requested resources for any single job.",
            "help_text": "If you are running on a smaller system, a pipeline step requesting more resources than are available may cause the Nextflow to stop the run with an error. These options allow you to cap the maximum resources requested by any single job so that the pipeline will run on your system.\n\nNote that you can not _increase_ the resources requested by any job using these options. For that you will need your own configuration file. See [the nf-core website](https://nf-co.re/usage/configuration) for details."
        },
        "Institutional config options": {
            "type": "object",
            "properties": {
                "custom_config_version": {
                    "type": "string",
                    "description": "Git commit id for Institutional configs.",
                    "default": "master",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog",
                    "help_text": ""
                },
                "custom_config_base": {
                    "type": "string",
                    "description": "Base directory for Institutional configs.",
                    "default": "https://raw.githubusercontent.com/nf-core/configs/master",
                    "hidden": true,
                    "help_text": "If you're running offline, Nextflow will not be able to fetch the institutional config files from the internet. If you don't need them, then this is not a problem. If you do need them, you should download the files from the repo and tell Nextflow where to find them with this parameter.",
                    "fa_icon": "fas fa-users-cog"
                },
                "hostnames": {
                    "type": "string",
                    "description": "Institutional configs hostname.",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog",
                    "help_text": ""
                },
                "config_profile_description": {
                    "type": "string",
                    "description": "Institutional config description.",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog",
                    "help_text": ""
                },
                "config_profile_contact": {
                    "type": "string",
                    "description": "Institutional config contact information.",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog",
                    "help_text": ""
                },
                "config_profile_url": {
                    "type": "string",
                    "description": "Institutional config URL link.",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog",
                    "help_text": ""
                }
            },
            "fa_icon": "fas fa-university",
            "description": "Parameters used to describe centralised config profiles. These should not be edited.",
            "help_text": "The centralised nf-core configuration profiles use a handful of pipeline parameters to describe themselves. This information is then printed to the Nextflow log when you run a pipeline. You should not need to change these values when you run a pipeline."
        },
        "Main parameters (SDRF)": {
            "type": "object",
            "description": "The input to the pipeline can be specified in two **mutually exclusive** ways:\nHere by using a path or URI to a PRIDE Sample to Data Relation Format file (SDRF), e.g. as part of a submitted and\nannotated PRIDE experiment (see [here](https://github.com/bigbio/proteomics-metadata-standard/tree/master/annotated-projects) for examples). Alternatively, you can use the [TSV options](#main_parameters__tsv_)",
            "default": "",
            "properties": {
                "sdrf": {
                    "type": "string",
                    "description": "The URI or path to the SDRF file",
                    "fa_icon": "fas fa-vials",
                    "help_text": "The URI or path to the SDRF file. Input files will be downloaded and cached from the URIs specified in the SDRF file.\nAn OpenMS-style experimental design will be generated based on the factor columns of the SDRF. The settings for the\nfollowing parameters will currently be overwritten by the ones specified in the SDRF:\n\n* `fixed_mods`,\n* `variable_mods`,\n* `precursor_mass_tolerance`,\n* `precursor_mass_tolerance_unit`,\n* `fragment_mass_tolerance`,\n* `fragment_mass_tolerance_unit`,\n* `fragment_method`,\n* `enzyme`"
                },
                "root_folder": {
                    "type": "string",
                    "description": "Root folder in which the spectrum files specified in the SDRF are searched",
                    "fa_icon": "fas fa-folder",
                    "help_text": "This optional parameter can be used to specify a root folder in which the spectrum files specified in the SDRF are searched.\nIt is usually used if you have a local version of the experiment already. Note that this option does not support recursive\nsearching yet."
                },
                "local_input_type": {
                    "type": "string",
                    "description": "Overwrite the file type/extension of the filename as specified in the SDRF",
                    "fa_icon": "fas fa-file-invoice",
                    "help_text": "If the above [`--root_folder`](#params_root_folder) was given to load local input files, this overwrites the file type/extension of\nthe filename as specified in the SDRF. Usually used in case you have an mzML-converted version of the files already. Needs to be\none of 'mzML' or 'raw' (the letter cases should match your files exactly)."
                }
            },
            "fa_icon": "far fa-chart-bar"
        },
        "Main parameters (TSV)": {
            "type": "object",
            "description": "The input to the pipeline can be specified in two **mutually exclusive** ways:\nHere by specifying globbing patterns to the input spectrum files in Thermo RAW or mzML format and a manual OpenMS-style experimental design file. Alternatively, you can use the [SDRF options](#main_parameters__sdrf_)",
            "default": "",
            "properties": {
                "expdesign": {
                    "type": "string",
                    "fa_icon": "fas fa-file-csv"
                },
                "spectra": {
                    "type": "string",
                    "description": "Location of mzML or Thermo RAW files",
                    "fa_icon": "fas fa-copy",
                    "help_text": "Use this to specify the location of your input mzML or Thermo RAW files:\n\n```bash\n--spectra 'path/to/data/*.mzML'\n```\n\nor\n\n```bash\n--spectra 'path/to/data/*.raw'\n```\n\nPlease note the following requirements:\n\n1. The path must be enclosed in quotes\n2. The path must have at least one `*` wildcard character"
                }
            },
            "fa_icon": "far fa-chart-bar"
        },
        "Protein database": {
            "type": "object",
            "description": "Settings that relate to the mandatory protein database and the optional generation of decoy entries.",
            "default": "",
            "properties": {
                "database": {
                    "type": "string",
                    "description": "The `fasta` protein database used during database search.",
                    "fa_icon": "fas fa-file",
                    "help_text": "Since the database is not included in an SDRF, this parameter always needs to be given to specify the input protein database\nwhen you run the pipeline. Remember to include contaminants (and decoys if not added in the pipeline with \\-\\-add-decoys)\n\n```bash\n--database '[path to Fasta protein database]'\n```"
                },
                "add_decoys": {
                    "type": "string",
                    "description": "Generate and append decoys to the given protein database",
                    "fa_icon": "fas fa-coins",
                    "help_text": "If decoys were not yet included in the input database, they have to be appended by OpenMS DecoyGenerator by adding this flag (TODO allow specifying type).\nDefault: pseudo-reverse peptides"
                },
                "decoy_affix": {
                    "type": "string",
                    "description": "Pre- or suffix of decoy proteins in their accession",
                    "default": "DECOY_",
                    "fa_icon": "fas fa-font",
                    "help_text": "If [`--add-decoys`](#params_add_decoys) was set, this setting is used during generation and passed to all tools that need decoy information.\n If decoys were appended to the database externally, this setting needs to match the used affix. (While OpenMS tools can infer the affix automatically, some thirdparty tools might not.)\nTypical values are 'rev', 'decoy', 'dec'. Look for them in your database."
                },
                "affix_type": {
                    "type": "string",
                    "description": "Location of the decoy marker string in the fasta accession. Before (prefix) or after (suffix)",
                    "default": "prefix",
                    "fa_icon": "fas fa-list-ol",
                    "help_text": "Prefix is highly recommended. Only in case an external tool marked decoys with a suffix, e.g. `sp|Q12345|ProteinA_DECOY` change this parameter to suffix."
                }
            },
            "fa_icon": "fas fa-database",
            "required": [
                "database"
            ]
        },
        "Spectrum preprocessing": {
            "type": "object",
            "description": "In case you start from profile mode mzMLs or the internal preprocessing during conversion with the ThermoRawFileParser fails (e.g. due to new instrument types), preprocessing has to be performed with OpenMS. Use this section to configure.",
            "default": "",
            "properties": {
                "openms_peakpicking": {
                    "type": "boolean",
                    "description": "Activate OpenMS-internal peak picking",
                    "fa_icon": "far fa-check-square",
                    "help_text": "Activate OpenMS-internal peak picking with the tool PeakPickerHiRes. Skips already picked spectra."
                },
                "peakpicking_inmemory": {
                    "type": "boolean",
                    "description": "Perform peakpicking in memory",
                    "fa_icon": "far fa-check-square",
                    "help_text": "Perform peakpicking in memory. Use only if problems occur.",
                },
                "peakpicking_ms_levels": {
                    "type": "string",
                    "description": "Which MS levels to pick as comma separated list. Leave empty for auto-detection.",
                    "fa_icon": "fas fa-font",
                    "help_text": "Which MS levels to pick as comma separated list, e.g. `--peakpicking_ms_levels 1,2`. Leave empty for auto-detection."
                }
            },
            "fa_icon": "far fa-chart-bar"
        },
        "Database search": {
            "type": "object",
            "description": "",
            "default": "",
            "properties": {
                "search_engines": {
                    "type": "string",
                    "description": "A comma separated list of search engines. Valid: comet, msgf",
                    "default": "comet",
                    "fa_icon": "fas fa-tasks",
                    "help_text": "A comma-separated list of search engines to run in parallel on each mzML file. Currently supported: comet and msgf (default: comet)\nIf more than one search engine is given, results are combined based on posterior error probabilities (see the different types\nof estimation procedures under [`--posterior_probabilities`](#--posterior_probabilities)). Combination is done with\n[ConsensusID](https://abibuilder.informatik.uni-tuebingen.de/archive/openms/Documentation/release/latest/html/TOPP_ConsensusID.html).\nSee also its corresponding [`--consensusid_algorithm`](#--consensusid_algorithm) parameter for different combination strategies.\nCombinations may profit from an increased [`--num_hits`](#--num_hits) parameter."
                },
                "enzyme": {
                    "type": "string",
                    "description": "The enzyme to be used for in-silico digestion",
                    "default": "Trypsin",
                    "fa_icon": "fas fa-list-ol",
                    "help_text": "Specify which enzymatic restriction should be applied, e.g. 'unspecific cleavage', 'Trypsin' (default), see OpenMS\n[enzymes](https://github.com/OpenMS/OpenMS/blob/develop/share/OpenMS/CHEMISTRY/Enzymes.xml). Note: MSGF does not support extended\ncutting rules, as used by default with `Trypsin`. I.e. if you specify `Trypsin with MSGF, it will be automatically converted to\n`Trypsin/P`= 'Trypsin without proline rule'."
                },
                "num_enzyme_termini": {
                    "type": "string",
                    "description": "Specify the amount of termini matching the enzyme cutting rules for a peptide to be considered. Valid values are `fully` (default), `semi`, or `none`",
                    "default": "fully",
                    "fa_icon": "fas fa-list-ol",
                    "help_text": ""
                },
                "allowed_missed_cleavages": {
                    "type": "integer",
                    "description": "Specify the maximum number of allowed missed enzyme cleavages in a peptide. The parameter is not applied if `unspecific cleavage` is specified as enzyme.",
                    "default": 2,
                    "fa_icon": "fas fa-sliders-h",
                    "help_text": ""
                },
                "precursor_mass_tolerance": {
                    "type": "integer",
                    "default": 5,
                    "fa_icon": "fas fa-sliders-h"
                },
                "precursor_mass_tolerance_unit": {
                    "type": "string",
                    "default": "ppm",
                    "fa_icon": "fas fa-sliders-h"
                },
                "fragment_mass_tolerance": {
                    "type": "number",
                    "default": 0.03,
                    "fa_icon": "fas fa-sliders-h"
                },
                "fragment_mass_tolerance_unit": {
                    "type": "string",
                    "default": "Da",
                    "fa_icon": "fas fa-list-ol"
                },
                "fixed_mods": {
                    "type": "string",
                    "default": "Carbamidomethyl (C)",
                    "fa_icon": "fas fa-tasks"
                },
                "variable_mods": {
                    "type": "string",
                    "default": "Oxidation (M)",
                    "fa_icon": "fas fa-tasks"
                },
                "fragment_method": {
                    "type": "string",
                    "default": "HCD",
                    "fa_icon": "fas fa-list-ol"
                },
                "isotope_error_range": {
                    "type": "string",
                    "default": "0,1",
                    "fa_icon": "fas fa-tasks"
                },
                "instrument": {
                    "type": "string",
                    "fa_icon": "fas fa-list-ol"
                },
                "protocol": {
                    "type": "string",
                    "default": "automatic",
                    "fa_icon": "fas fa-list-ol"
                },
                "min_precursor_charge": {
                    "type": "integer",
                    "default": 2,
                    "fa_icon": "fas fa-sliders-h"
                },
                "max_precursor_charge": {
                    "type": "integer",
                    "default": 4,
                    "fa_icon": "fas fa-sliders-h"
                },
                "min_peptide_length": {
                    "type": "integer",
                    "default": 6,
                    "fa_icon": "fas fa-sliders-h"
                },
                "max_peptide_length": {
                    "type": "integer",
                    "default": 40,
                    "fa_icon": "fas fa-sliders-h"
                },
                "num_hits": {
                    "type": "integer",
                    "default": 1,
                    "fa_icon": "fas fa-sliders-h"
                },
                "max_mods": {
                    "type": "integer",
                    "default": 3,
                    "fa_icon": "fas fa-sliders-h"
                },
                "db_debug": {
                    "type": "integer",
                    "default": 0,
                    "fa_icon": "fas fa-bug"
                }
            },
            "fa_icon": "fas fa-search"
        },
        "Modification localization": {
            "type": "object",
            "description": "",
            "default": "",
            "properties": {
                "enable_mod_localization": {
                    "type": "string",
                    "fa_icon": "fas fa-toggle-on"
                },
                "mod_localization": {
                    "type": "string",
                    "default": "Phospho (S),Phospho (T),Phospho (Y)",
                    "fa_icon": "fas fa-tasks"
                },
                "luciphor_neutral_losses": {
                    "type": "string",
                    "fa_icon": "fas fa-font",
                    "hidden": true
                },
                "luciphor_decoy_mass": {
                    "type": "number",
                    "fa_icon": "fas fa-font",
                    "hidden": true
                },
                "luciphor_decoy_neutral_losses": {
                    "type": "string",
                    "fa_icon": "fas fa-font",
                    "hidden": true
                }
            },
            "fa_icon": "fas fa-search-location"
        },
        "Peptide re-indexing": {
            "type": "object",
            "description": "",
            "default": "",
            "properties": {
                "allow_unmatched": {
                    "type": "string",
                    "fa_icon": "far fa-check-square"
                },
                "IL_equivalent": {
                    "type": "string",
                    "default": "true",
                    "fa_icon": "far fa-check-square"
                }
            },
            "fa_icon": "fas fa-project-diagram"
        },
        "PSM re-scoring (general)": {
            "type": "object",
            "description": "",
            "default": "",
            "properties": {
                "posterior_probabilities": {
                    "type": "string",
                    "fa_icon": "fas fa-list-ol"
                },
                "psm_pep_fdr_cutoff": {
                    "type": "number",
                    "default": 0.1,
                    "fa_icon": "fas fa-filter"
                },
                "pp_debug": {
                    "type": "integer",
                    "default": 0,
                    "fa_icon": "fas fa-bug"
                }
            },
            "fa_icon": "fas fa-star-half-alt"
        },
        "PSM re-scoring (Percolator)": {
            "type": "object",
            "description": "",
            "default": "",
            "properties": {
                "FDR_level": {
                    "type": "string",
                    "default": "peptide-level-fdrs",
                    "fa_icon": "fas fa-list-ol"
                },
                "train_FDR": {
                    "type": "number",
                    "default": 0.05,
                    "fa_icon": "fas fa-sliders-h"
                },
                "test_FDR": {
                    "type": "number",
                    "default": 0.05,
                    "fa_icon": "fas fa-sliders-h"
                },
                "subset_max_train": {
                    "type": "integer",
                    "default": 300000,
                    "fa_icon": "fas fa-sliders-h"
                },
                "klammer": {
                    "type": "string",
                    "fa_icon": "far fa-check-square"
                },
                "description_correct_features": {
                    "type": "integer",
                    "default": 0,
                    "fa_icon": "fas fa-list-ol"
                }
            },
            "fa_icon": "fas fa-star-half"
        },
        "PSM re-scoring (distribution fitting)": {
            "type": "object",
            "description": "",
            "default": "",
            "properties": {
                "outlier_handling": {
                    "type": "string",
                    "default": "none",
                    "fa_icon": "fas fa-list-ol"
                }
            },
            "fa_icon": "far fa-star-half"
        },
        "Consensus ID": {
            "type": "object",
            "description": "",
            "default": "",
            "properties": {
                "consensusid_algorithm": {
                    "type": "string",
                    "default": "best",
                    "fa_icon": "fas fa-list-ol"
                },
                "consensusid_considered_top_hits": {
                    "type": "integer",
                    "default": 0,
                    "fa_icon": "fas fa-sliders-h"
                },
                "min_consensus_support": {
                    "type": "integer",
                    "default": 0,
                    "fa_icon": "fas fa-filter"
                }
            },
            "fa_icon": "fas fa-code-branch"
        },
        "Protein inference": {
            "type": "object",
            "description": "",
            "default": "",
            "properties": {
                "protein_inference": {
                    "type": "string",
                    "default": "aggregation",
                    "fa_icon": "fas fa-list-ol"
                },
                "protein_level_fdr_cutoff": {
                    "type": "number",
                    "default": 0.05,
                    "fa_icon": "fas fa-filter"
                }
            },
            "fa_icon": "fab fa-hubspot"
        },
        "Protein quantification": {
            "type": "object",
            "description": "",
            "default": "",
            "properties": {
                "mass_recalibration": {
                    "type": "string",
                    "fa_icon": "far fa-check-square"
                },
                "transfer_ids": {
                    "type": "string",
                    "fa_icon": "far fa-check-square"
                },
                "targeted_only": {
                    "type": "string",
                    "default": "true",
                    "fa_icon": "far fa-check-square"
                },
                "inf_quant_debug": {
                    "type": "integer",
                    "default": 0,
                    "fa_icon": "fas fa-bug"
                }
            },
            "fa_icon": "fas fa-braille"
        },
        "Statistical post-processing": {
            "type": "object",
            "description": "",
            "default": "",
            "properties": {
                "skip_post_msstats": {
                    "type": "string",
                    "fa_icon": "fas fa-forward"
                },
                "ref_condition": {
                    "type": "string",
                    "fa_icon": "fas fa-font"
                },
                "contrasts": {
                    "type": "string",
                    "fa_icon": "fas fa-font"
                }
            },
            "fa_icon": "fab fa-r-project"
        },
        "Quality control": {
            "type": "object",
            "description": "",
            "default": "",
            "properties": {
                "enable_qc": {
                    "type": "string",
                    "fa_icon": "fas fa-toggle-on"
                },
                "ptxqc_report_layout": {
                    "type": "string",
                    "fa_icon": "far fa-file"
                }
            },
            "fa_icon": "fas fa-file-medical-alt"
        }
    }
}